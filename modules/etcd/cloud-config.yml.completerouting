#cloud-config
---
coreos:
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem
    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem
    etcd_endpoints: https://etcd.${ internal-tld }:2379
  locksmith:
    endpoint: https://etcd.${ internal-tld }:2379
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem
    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem
  units:
    - name: etcd-member.service
      command: start
      drop-ins:
        - name: 01-wait-for-certs.conf
          content: |
            [Unit]
            After=create-certificates.service
            Requires=create-certificates.service
            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem
            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem
            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem
        - name: 15-deps.conf
          content: |
            [Unit]
            After=smilodon.service
            Requires=smilodon.service
            ConditionFileNotEmpty=/run/smilodon/environment
        - name: 10-environment.conf
          content: |
            [Service]
            EnvironmentFile=/run/smilodon/environment
            Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379"
            #Environment="ETCD_ADVERTISE_CLIENT_URLS=http://${ fqdn }:2379"
            Environment="ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem"
            Environment="ETCD_CLIENT_CERT_AUTH=true"
            Environment="ETCD_DISCOVERY_SRV=${ internal-tld }"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380"
            #Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${ fqdn }:2380"
            Environment="ETCD_INITIAL_CLUSTER_STATE=new"
            Environment="ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }"
            Environment="ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem"
            Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
            #Environment="ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380"
            #Environment="ETCD_NAME=node$${ NODE_ID }"
            Environment="ETCD_NAME=${ fqdn }"
            Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem"
            Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem"
            Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"
            Environment="ETCD_DEBUG=true"
    - name: complete-routing.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Setup Network Environment
        Wants=Smilodon.service
        After=Smilodon.service
        Before=etcd-member.service
        [Service]
        ExecStartPre=-/usr/bin/route add -host 10.0.10.10 gw  ${etcd-gtwy}
        ExecStartPre=-/usr/bin/route add -host 10.0.11.10 gw  ${etcd-gtwy}
        ExecStart=/usr/bin/route add -host 10.0.12.10 gw  ${etcd-gtwy}
        RemainAfterExit=yes
        Type=oneshot
    - name: smilodon.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Smilodon - manage ebs+eni attachment
        [Service]
        Environment="URL=${smilodon_release_url}"
        Environment="OUTPUT_FILE=/opt/bin/smilodon"
        Environment="MD5SUM=${smilodon_release_md5}"
        EnvironmentFile=/etc/aws-environment
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/bash -c 'until [[ -x $${OUTPUT_FILE} ]] && [[ $(md5sum $${OUTPUT_FILE} | cut -f1 -d" ") == $${MD5SUM} ]]; do wget -q -O $${OUTPUT_FILE} $${URL} && chmod +x $${OUTPUT_FILE}; done'
        ExecStart=/opt/bin/smilodon --filters=tag:Env=${environment}
        Restart=always
        RestartSec=10

# Workaround until this has been fixed: https://github.com/systemd/systemd/issues/1784
    - name: networkd-restart.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Restart systemd-networkd when DOWN interface is found
        [Service]
        ExecStart=/usr/bin/bash -c 'while true; do ip -o -4 link show | grep -q "eth[0-1]:.*state DOWN" && systemctl restart systemd-networkd; sleep 60; done'
        Restart=always
        RestartSec=10
    - name: 20-eth1.network
      runtime: false
      content: |
        [Match]
        Name=eth1
        [Network]
        DHCP=ipv4
        [DHCP]
        UseDNS=false
        SendHostname=true
        UseRoutes=false
        RouteMetric=2048
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Wants=create-certificates.service
            After=create-certificates.service
            [Service]
            EnvironmentFile=/etc/environment
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \
              '{ "Network": "${ pod-ip-range }", "Backend": { "Type": "vxlan" } }'
            Restart=always
            RestartSec=10
    - name: xvde-mkfs.service
      content: |
        [Unit]
        Description=Format /dev/xvde
        After=dev-xvde.device
        Requires=dev-xvde.device
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/bash -c '/usr/bin/lsblk -n -o FSTYPE /dev/xvde | grep ext4 || (/usr/sbin/wipefs -f /dev/xvde && /usr/sbin/mkfs.ext4 /dev/xvde)'
    - name: var-lib-etcd.mount
      content: |
        [Unit]
        Description=Mount etcd3 data volume
        Before=etcd-member.service
        After=xvde-mkfs.service
        Requires=xvde-mkfs.service
        [Mount]
        What=/dev/xvde
        Where=/var/lib/etcd 
        Type=ext4
    - name: var-lib-etcd.automount
      command: start
      enable: true
      content: |
        [Unit]
        Description=Auto mount etcd3 data volume
        [Automount]
        Where=/var/lib/etcd 
    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            [Service]
            Restart=always
            RestartSec=10
    - name: download-cfssl.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Requires=network-online.target
        Before=etcd-member.service
        Description=Download cfssl
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson
    - name: create-certificates.service
      command: start
      content: |
        [Unit]
        After=download-cfssl.service
        Before=flannel.service
        ConditionFileIsExecutable=/opt/bin/cfssl
        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates
        Requires=download-cfssl.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem
        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem
        ExecStart=/opt/bin/create-certificates
        RemainAfterExit=yes
        Type=oneshot
    - name: prefetch-rkt-hyperkube.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Requires=network-online.target
        Description=Prefetch rkt Hyperkube
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube
        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }
    - name: prefetch-docker-hyperkube.service
      command: start
      content: |
        [Unit]
        After=docker.service
        Requires=docker.service
        Description=Prefetch docker Hyperkube
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/docker pull ${ hyperkube }
    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem
        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper
        After=flanneld.service
        After=prefetch-rkt-hyperkube.service
        After=prefetch-docker-hyperkube.service
        Requires=flanneld.service
        [Service]
        EnvironmentFile=-/etc/environment
        Environment="KUBELET_ACI=${ hyperkube-image }"
        Environment="KUBELET_VERSION=${ hyperkube-tag }"
        Environment="RKT_OPTS=\
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume rkt,kind=host,source=/opt/bin/host-rkt \
          --mount volume=rkt,target=/usr/bin/rkt \
          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
          --mount volume=var-lib-rkt,target=/var/lib/rkt \
          --volume stage,kind=host,source=/tmp \
          --mount volume=stage,target=/tmp \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --api-servers=http://127.0.0.1:8080 \
          --cloud-provider=aws \
          --cluster-dns=${ dns-service-ip } \
          --cluster-domain=${ cluster-domain } \
          --kubeconfig=/etc/kubernetes/kubeconfig.yml \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --node-labels node-role.kubernetes.io/master \
          --register-node=true \
          --register-with-taints node-role.kubernetes.io/master='':NoSchedule
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target
  update:
    reboot-strategy: etcd-lock
write-files:
  - path: /etc/sysctl.d/10-disable-ipv6.conf
    permissions: 0644
    owner: root
    content: |
      net.ipv6.conf.all.disable_ipv6 = 1
  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem
      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem
      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem
      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem
      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem
      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem
      ETCDCTL_ENDPOINT=https://${ fqdn }:2379

  - path: /etc/aws-environment
    permissions: 0444
    content: |
      AWS_REGION=${region}
      DNS_ZONE_NAME=${zonename}
      ENVIRONMENT=${environment}
       
  - path: /opt/bin/fetch-from-s3
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      until /usr/bin/rkt run \
        --net=host \
        --trust-keys-from-https \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \
        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl
      do
        echo "retrying"
        sleep 5.2
      done
      echo "✓"
  - path: /opt/bin/wait-for-certs
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      until ls /etc/kubernetes/ssl
      do
        echo "retrying"
        sleep 5.2
      done
      echo "✓"
  - path: /opt/bin/create-certificates
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -vex
      OUTDIR=/etc/kubernetes/ssl
      function error {
        echo "✗ Error on line $1"'!'
        exit 1
      }
      trap 'error $LINENO' ERR
      until printf "." && curl -d '{"label":"primary"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info &>/dev/null
      do sleep 5.2; done; echo "✓"
      DNS1="kubernetes"
      DNS2="kubernetes.default"
      DNS3="kubernetes.default.svc"
      DNS4="kubernetes.default.svc.cluster.local"
      DEFAULT_HOSTS="$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1"

      function csr {
        cat <<EOF
      {"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
      EOF
      }

      function generate {
        CN=$1
        PROFILE=$2
        HOSTS=$3
        echo "$(csr $CN)" \
          | /opt/bin/cfssl gencert \
            -remote=pki.${ internal-tld }:8888 \
            -profile=$PROFILE \
            -hostname="$HOSTS" - \
          | /opt/bin/cfssljson -bare $CN

        chmod 0644 $${CN}.pem $${CN}-key.pem

      }
      mkdir -p $OUTDIR && cd $OUTDIR
      generate k8s-apiserver client-server "$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }"
      generate k8s-etcd client-server "etcd.${ internal-tld },etcd1.${ internal-tld },etcd2.${ internal-tld },etcd3.${ internal-tld },${ fqdn }"

